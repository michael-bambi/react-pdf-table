{"version":3,"file":"TableRow.js","sourceRoot":"","sources":["../src/TableRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,gDAA2C;AAG3C,6BAA+B;AAE/B,iCAAmD;AA+C5C,IAAM,QAAQ,GAAG,UAAS,KAA2B;IAC1D,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClD,IAAA,KAAmF,IAAA,gCAAwB,EAAC,KAAK,CAAC,EAAhH,iBAAiB,uBAAA,EAAE,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAA,EAAE,gBAAgB,sBAAoC,CAAC;IAEnH,IAAA,KAAoD,QAAQ,CAAC,MAAM,CACvE,UAAC,MAAM,EAAE,KAAK;QACZ,OAAA,KAAK,CAAC,cAAc,CAAyB,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS;YACxF,CAAC,CAAC;gBACE,yBAAyB,EAAE,MAAM,CAAC,yBAAyB,GAAG,CAAC;gBAC/D,kBAAkB,EAAE,MAAM,CAAC,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS;aACtE;YACH,CAAC,CAAC,MAAM;IALV,CAKU,EACZ;QACE,yBAAyB,EAAE,CAAC;QAC5B,kBAAkB,EAAE,CAAC;KACtB,CACF,EAZO,yBAAyB,+BAAA,EAAE,kBAAkB,wBAYpD,CAAC;IAEF,IAAM,yBAAyB,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,yBAAyB,CAAC,CAAC,CAAC;IAEhH,IAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;IAEjI,OAAO,CACL,oBAAC,eAAI,IACH,KAAK,EAAE;YACL,YAAY,EAAE,mBAAmB,IAAI,iBAAiB;YACtD,WAAW,EAAE,kBAAkB,IAAI,iBAAiB;YACpD,UAAU,EAAE,iBAAiB,IAAI,iBAAiB;YAClD,SAAS,EAAE,gBAAgB,IAAI,iBAAiB;YAChD,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,eAAe;YAC/B,eAAe,EAAE,QAAQ;YACzB,SAAS,EAAE,CAAC,CAAC;SACd,IAEA,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAC,EAAE,EAAE,WAAW;;QAClD,OAAA,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC;YACtB,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,sBACnB,SAAS,EAAE,MAAA,EAAE,CAAC,KAAK,CAAC,SAAS,mCAAI,yBAAyB,IACvD,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,IAAa,EAAE,CAAC,KAChD,GAAG,EAAE,WAAW,EAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,iBAAiB,EAAE,iBAAiB,IAAI,WAAW,KAAK,CAAC,EACzD,kBAAkB,EAAE,kBAAkB,IAAI,WAAW,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,IAC7E;YACJ,CAAC,CAAC,IAAI,CAAA;KAAA,CACT,CACI,CACR,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,QAAQ,YAoDnB","sourcesContent":["import { View } from '@react-pdf/renderer';\nimport { DataTableCellProps } from 'DataTableCell';\nimport { TypedReactNode } from 'Types';\nimport * as React from 'react';\nimport { TableBorder, TableCellProps } from './TableCell';\nimport { getDefaultBorderIncludes } from './Utils';\n\nexport interface TableRowProps<TData> extends TableBorder {\n  /**\n   * The font size as a valid unit defined in react-pdf.\n   */\n  fontSize?: number | string;\n\n  /**\n   * Whether to align the text. Defaults to left.\n   */\n  textAlign?: 'left' | 'center' | 'right';\n\n  /**\n   * Any data associated, relevant if the parent is a {@see DataTableCell}.\n   */\n  data?: TData;\n\n  /**\n   * Whether rows have alternating styles\n   */\n  zebra?: boolean;\n\n  /**\n   * Whether this row is even (true) or odd (false)\n   */\n  even?: boolean;\n\n  /**\n   * Specify the color of even rows\n   */\n  evenRowColor?: string;\n\n  /**\n   * Specify the color of odd rows\n   */\n  oddRowColor?: string;\n\n  /**\n   * Only {@see DataTableCell} or {@see TableCell} elements are valid children\n   */\n  children?: TypedReactNode<TableCellProps | DataTableCellProps<TData>>;\n}\n\n/**\n * This component describes how to display a row.\n */\nexport const TableRow = <TData,>(props: TableRowProps<TData>) => {\n  const rowCells = React.Children.toArray(props.children);\n  const { includeLeftBorder, includeBottomBorder, includeRightBorder, includeTopBorder } = getDefaultBorderIncludes(props);\n\n  const { numberOfWeightingsDefined, remainingWeighting } = rowCells.reduce(\n    (result, child) =>\n      React.isValidElement<{ weighting?: number }>(child) && child.props.weighting !== undefined\n        ? {\n            numberOfWeightingsDefined: result.numberOfWeightingsDefined + 1,\n            remainingWeighting: result.remainingWeighting - child.props.weighting,\n          }\n        : result,\n    {\n      numberOfWeightingsDefined: 0,\n      remainingWeighting: 1,\n    }\n  );\n\n  const weightingsPerNotSpecified = Math.ceil(remainingWeighting / (rowCells.length - numberOfWeightingsDefined));\n\n  const rowColor = (props.zebra || props.evenRowColor) && props.even ? props.evenRowColor || 'lightgray' : props.oddRowColor || '';\n\n  return (\n    <View\n      style={{\n        borderBottom: includeBottomBorder && '1pt solid black',\n        borderRight: includeRightBorder && '1pt solid black',\n        borderLeft: includeLeftBorder && '1pt solid black',\n        borderTop: includeTopBorder && '1pt solid black',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        backgroundColor: rowColor,\n        marginTop: -1,\n      }}\n    >\n      {React.Children.map(props.children, (rc, columnIndex) =>\n        React.isValidElement(rc)\n          ? React.cloneElement(rc, {\n              weighting: rc.props.weighting ?? weightingsPerNotSpecified,\n              ...(props.data && { data: props.data as TData }),\n              key: columnIndex,\n              fontSize: props.fontSize,\n              textAlign: props.textAlign,\n              includeLeftBorder: includeLeftBorder && columnIndex === 0,\n              includeRightBorder: includeRightBorder && columnIndex !== rowCells.length - 1,\n            })\n          : null\n      )}\n    </View>\n  );\n};\n"]}