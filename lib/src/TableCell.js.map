{"version":3,"file":"TableCell.js","sourceRoot":"","sources":["../../src/TableCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,gDAAiD;AAEjD,6BAA+B;AAC/B,iCAAqE;AA0D9D,IAAM,SAAS,GAA6B,UAAC,KAAqB;;IACvE,IAAI,OAAmC,CAAC;IAExC,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACtC,OAAO,GAAG,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAQ,CAAC;KACzC;SAAM,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC7C,OAAO,GAAG,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAQ,CAAC;KACpD;SAAM;QACL,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;KAC1B;IAEO,IAAA,kBAAkB,GAAK,IAAA,gCAAwB,EAAC,KAAK,CAAC,mBAApC,CAAqC;IAC/D,IAAM,YAAY,GAAU;QAC1B,IAAI,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,CAAC;QAE1B,cAAc,EAAE,SAAS;QACzB,SAAS,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,MAAM;QACpC,QAAQ,EAAE,MAAA,KAAK,CAAC,QAAQ,mCAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,WAAW,EAAE,kBAAkB,IAAI,iBAAiB;QACpD,QAAQ,EAAE,YAAY;QACtB,UAAU,EAAE,UAAU;QACtB,QAAQ,EAAE,QAAQ;KACnB,CAAC;IAEF,IAAM,YAAY,kBAAa,YAAY,GAAK,IAAA,wBAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,OAAC,CAAC;IAE/E,OAAO,CACL,oBAAC,eAAI,IAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,IAClC,OAAO,CACH,CACR,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,SAAS,aA+BpB","sourcesContent":["import { Text, View } from '@react-pdf/renderer';\nimport { Style } from 'Types';\nimport * as React from 'react';\nimport { getDefaultBorderIncludes, transformToArray } from './Utils';\n/**\n * Whether to include borders or not.\n * Depending on the context some toggles will not have any effect.\n */\nexport interface TableBorder {\n  /**\n   * Include the top border. Default true.\n   */\n  includeTopBorder?: boolean;\n\n  /**\n   * Include the right border. Default true.\n   */\n  includeRightBorder?: boolean;\n\n  /**\n   * Include the bottom border. Default true.\n   */\n  includeBottomBorder?: boolean;\n\n  /**\n   * Include the left border. Default true.\n   */\n  includeLeftBorder?: boolean;\n}\n\nexport interface TableCellProps extends TableBorder, React.PropsWithChildren {\n  /**\n   * The weighting of a cell based on the flex layout style.\n   * This value is between 0..1, if not specified 1 is assumed, this will take up the remaining available space.\n   */\n  weighting?: number;\n\n  /**\n   * Extra styling to apply. These will override existing style with the same key.\n   */\n  style?: Style | Style[];\n\n  /**\n   * How to align the text\n   */\n  textAlign?: 'left' | 'center' | 'right';\n\n  /**\n   * Whether this is a header cell or not. If not defined it will be false.\n   */\n  isHeader?: boolean;\n\n  /**\n   * The font-size to apply to the cell.\n   */\n  fontSize?: number | string;\n}\n\n/**\n * This component displays the associated content of it's children.\n */\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\n  let content: TableCellProps['children'];\n\n  if (typeof props.children === 'string') {\n    content = <Text>{props.children}</Text>;\n  } else if (typeof props.children === 'number') {\n    content = <Text>{props.children.toString()}</Text>;\n  } else {\n    content = props.children;\n  }\n\n  const { includeRightBorder } = getDefaultBorderIncludes(props);\n  const defaultStyle: Style = {\n    flex: props.weighting ?? 1,\n    // @ts-ignore\n    justifyContent: 'stretch',\n    textAlign: props.textAlign ?? 'left',\n    fontSize: props.fontSize ?? (props.isHeader === true ? 14 : 12),\n    borderRight: includeRightBorder && '1pt solid black',\n    wordWrap: 'break-word',\n    whiteSpace: 'pre-wrap',\n    overflow: 'hidden',\n  };\n\n  const mergedStyles: Style[] = [defaultStyle, ...transformToArray(props.style)];\n\n  return (\n    <View style={mergedStyles} wrap={true}>\n      {content}\n    </View>\n  );\n};\n"]}