{"version":3,"file":"TableBody.js","sourceRoot":"","sources":["../../src/TableBody.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,6BAA+B;AAC/B,uCAAqD;AACrD,iCAAmD;AAqB5C,IAAM,SAAS,GAAG,UAAmB,KAA+B;;IACzE,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClD,IAAA,KAAmF,IAAA,gCAAwB,EAAC,KAAK,CAAC,EAAhH,iBAAiB,uBAAA,EAAE,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAA,EAAE,gBAAgB,sBAAoC,CAAC;IACzH,IAAM,QAAQ,GAAG,MAAA,KAAK,CAAC,IAAI,mCAAI,EAAE,CAAC;IAElC,OAAO,CACL,0CACG,QAAQ,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,QAAQ;;QAAK,OAAA,CAChC,oBAAC,mBAAQ,eACH,KAAK,IACT,GAAG,EAAE,QAAQ,EACb,IAAI,EAAE,QAAQ,GAAG,CAAC,KAAK,CAAC,EACxB,IAAI,EAAE,IAAI,EACV,iBAAiB,EAAE,iBAAiB,EACpC,mBAAmB,EAAE,mBAAmB,EACxC,kBAAkB,EAAE,kBAAkB,EACtC,gBAAgB,EAAE,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,MAAA,KAAK,CAAC,eAAe,mCAAI,KAAK,CAAC,CAAC,CAAC,gBAAgB,KAEnF,KAAK,CAAC,QAAQ,CACN,CACZ,CAAA;KAAA,CAAC,CACD,CACJ,CAAC;AACJ,CAAC,CAAC;AAvBW,QAAA,SAAS,aAuBpB","sourcesContent":["import { DataTableCellProps } from 'DataTableCell';\nimport { TypedReactNode } from 'Types';\nimport * as React from 'react';\nimport { TableRow, TableRowProps } from './TableRow';\nimport { getDefaultBorderIncludes } from './Utils';\n\nexport interface TableBodyProps<TData> extends Omit<TableRowProps<TData>, 'data'> {\n  /**\n   * The data associated with the table.\n   */\n  data?: TData[];\n  zebra?: boolean;\n  children?: TypedReactNode<DataTableCellProps<TData>>;\n}\n\n// This interface adds a flag to indicate if we should render the top border,\n// thus allowing us to render it in the event that no\n// header rows were present in the table.\ninterface InternalBodyProps<TData> extends TableBodyProps<TData> {\n  renderTopBorder?: boolean;\n}\n\n/**\n * This component displays the data as {@see TableRow}s.\n */\nexport const TableBody = <TData = unknown,>(props: InternalBodyProps<TData>) => {\n  const rowCells = React.Children.toArray(props.children);\n  const { includeLeftBorder, includeBottomBorder, includeRightBorder, includeTopBorder } = getDefaultBorderIncludes(props);\n  const dataRows = props.data ?? [];\n\n  return (\n    <>\n      {dataRows.map((data, rowIndex) => (\n        <TableRow<TData>\n          {...props}\n          key={rowIndex}\n          even={rowIndex % 2 === 0}\n          data={data}\n          includeLeftBorder={includeLeftBorder}\n          includeBottomBorder={includeBottomBorder}\n          includeRightBorder={includeRightBorder}\n          includeTopBorder={rowIndex === 0 ? props.renderTopBorder ?? false : includeTopBorder}\n        >\n          {props.children}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n"]}